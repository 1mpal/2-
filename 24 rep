class Firewall:
    def __init__(self):
        self._open_ports = set()
        
    def open_port (self, port): 
        self._open_ports.add(port)
        
    def close_port(self, port):self._open_ports.discard(port)  


    def is_port_open(self, port):
        return port in self._open_ports

    def show_open_ports(self):
        print("Open ports:", self._open_ports)  
        
        
class SecureFirewall(Firewall):
    def __init__(self):
        super().__init__()
        self.blocked_ips = set()
        self.access_attempts = {} # Словарь для хранения попыток доступа
        
    def block_ip(self, ip):
        self.blocked_ips.add(ip)
        
    def attempt_connection(self, port, ip):
        if ip in self.blocked_ips:
            print(f"Connection from {ip} to port {port} blocked (IP is blocked)")
            return False
        if self.is_port_open(port):
            print(f"Connection from{ip} to port {port} successful")
            return True
        else:
            print(f"Connection from {ip} to port {port} failed.(port closed)")
            self.log_attempts(port, ip) # Логируем неудачную попытку
            return False
    def log_attempts(self, port, ip):
        if ip not in
        self.access_attempts:
        self.access_attempts [ip] = {} 
        if port not in
        self.access_attempts[ip]:
        self.access_attempts[ip] [port] = 0
        self.access_attempts[ip] [port] +=1
        if self.access_attempts[ip] [port] >=3:
            self.blocked_ips(ip)
            print(f"IP {ip} blocked after 3 failed attempts to port {port}")
            
        # Тестирование
        fw = SecureFirewall()
        
        fw.open_port(80)
        fw.open_port(443)
        fw.show_open_ports()
        
        fw.attempt_connection(80,"192.168.1.10")
        fw.attempt_connection(22,"192.168.1.10")
        fw.attempt_connection(22, "192.168.1.10") # Вторая попытка на закрытый порт
        fw.attempt_connection(22, "192.168.1.10") # Третья попытка -> Блокировка
        fw.attempt_connection(80, "192.168.1.10") # Заблокированный IP
        
